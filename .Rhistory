Train_tree <- rpart(Risk ~ ., data=data_train, method="class")
rpart.plot(Train_tree ,cex=0.9,fallen.leave=TRUE) # create a decision tree
Test_pred <- predict(Train_tree, data_test, type="class") #testing on test data
t=table(Test_pred, data_test$Risk)
t
accuracy_dt=sum(diag(t))/sum(t)
accuracy_dt
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
data <- read.csv("gc.csv")
library(MLmetrics)
library(rpart)
library(rpart.plot)
library(sqldf)
library(dplyr)
library(knitr)
str(data) # check types
data = data[,-1]  # remove "id" column
sum(is.na(data$Saving.accounts)) #saving acc column has 183 null values
sum(is.na(data$Checking.account)) #checking acc column has 394 null values
data$Saving.accounts <- as.character(data$Saving.accounts)
data$Saving.accounts[is.na(data$Saving.accounts)] <- "none" # when you see NA transform it to "none"
data$Checking.account <- as.character(data$Checking.account)
data$Checking.account[is.na(data$Checking.account)] <- "none" # when you see NA transform it to "none"
sum(is.na(data))
data$Risk[data$Risk == "good"]  <- 0
data$Risk[data$Risk == "bad"]  <- 1
data$Risk = as.numeric(data$Risk) # transform target risks' type chr to num
str(data)
set.seed(12345)
train <- sample(1:nrow(data), nrow(data) * 0.8 ,replace = FALSE)
data_train <- data[train,]
data_test <- data[-train,]
Train_tree <- rpart(Risk ~ ., data=data_train, method="class")
rpart.plot(Train_tree ,cex=0.9,fallen.leave=TRUE) # create a decision tree
Test_pred <- predict(Train_tree, data_test, type="class") #testing on test data
t=table(Test_pred, data_test$Risk)
t
accuracy_dt=sum(diag(t))/sum(t)
accuracy_dt
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
View(test_df)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
query_DESC=sqldf("select * from test_df order by Predicted_Risk DESC")
# "Row_Number" column added with respect to column Predicted_Risk
query_Row_Number=sqldf("select Actual_Risk, Predicted_Risk, ROW_NUMBER() OVER (ORDER BY Predicted_Risk DESC) as Row_Number FROM query_DESC")
# dplyr package for adding column "Rank"
query_Rank_Number <- query_Row_Number %>%
group_by(Actual_Risk) %>%
mutate(Rank = row_number())
query_Rank_Number
# gini sqldf
# gini = auc * 2 - 1
attach(test_df)
rpart.plot(Train_tree ,cex=0.9,fallen.leave=FALSE) # create a decision tree
rpart.plot(Train_tree ,cex=0.9,fallen.leave=TRUE) # create a decision tree
getwd()
data <- read.csv("gc.csv")
library(MLmetrics)
library(sqldf)
library(dplyr)
library(knitr)
str(data) # check types
data = data[,-1]  # remove "id" column
sum(is.na(data$Saving.accounts)) #saving acc column has 183 null values
sum(is.na(data$Checking.account)) #checking acc column has 394 null values
data$Saving.accounts <- as.character(data$Saving.accounts)
data$Saving.accounts[is.na(data$Saving.accounts)] <- "none" # when you see NA transform it to "none"
data$Checking.account <- as.character(data$Checking.account)
data$Checking.account[is.na(data$Checking.account)] <- "none" # when you see NA transform it to "none"
sum(is.na(data))
data$Risk[data$Risk == "good"]  <- 0
data$Risk[data$Risk == "bad"]  <- 1
data$Risk = as.numeric(data$Risk) # transform target risks' type chr to num
str(data)
set.seed(12345)
train <- sample(1:nrow(data), nrow(data) * 0.8 ,replace = FALSE)
data_train <- data[train,]
data_test <- data[-train,]
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
query_DESC=sqldf("select * from test_df order by Predicted_Risk DESC")
# "Row_Number" column added with respect to column Predicted_Risk
query_Row_Number=sqldf("select Actual_Risk, Predicted_Risk, ROW_NUMBER() OVER (ORDER BY Predicted_Risk DESC) as Row_Number FROM query_DESC")
# dplyr package for adding column "Rank"
query_Rank_Number <- query_Row_Number %>%
group_by(Actual_Risk) %>%
mutate(Rank = row_number())
query_Rank_Number
query_Rank_Number
attach(test_df)
attach(query_Rank_Number)
View(query_Rank_Number)
gini_query = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select
avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
View(gini_query)
gini = (auc * 2) - 1
View(gini_query)
Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
auc_query = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select
avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
auc_query = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select
avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score,
(auc_score * 2) - 1 as gini
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
auc_query = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score,
auc_score * 2 - 1 as gini
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
auc_query = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score,
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
auc_query = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
query_GINI=sqldf("select auc_score from query_AUC where gini = (auc_score*2) - 1")
query_AUC = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
query_GINI=sqldf("select auc_score from query_AUC where gini = (auc_score*2) - 1")
getwd()
data <- read.csv("gc.csv")
library(MLmetrics)
library(sqldf)
library(dplyr)
library(knitr)
str(data) # check types
data = data[,-1]  # remove "id" column
sum(is.na(data$Saving.accounts)) #saving acc column has 183 null values
sum(is.na(data$Checking.account)) #checking acc column has 394 null values
data$Saving.accounts <- as.character(data$Saving.accounts)
data$Saving.accounts[is.na(data$Saving.accounts)] <- "none" # when you see NA transform it to "none"
data$Checking.account <- as.character(data$Checking.account)
data$Checking.account[is.na(data$Checking.account)] <- "none" # when you see NA transform it to "none"
sum(is.na(data))
data$Risk[data$Risk == "good"]  <- 0
data$Risk[data$Risk == "bad"]  <- 1
data$Risk = as.numeric(data$Risk) # transform target risks' type chr to num
str(data)
set.seed(12345)
train <- sample(1:nrow(data), nrow(data) * 0.8 ,replace = FALSE)
data_train <- data[train,]
data_test <- data[-train,]
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
View(test_df)
query_DESC=sqldf("select * from test_df order by Predicted_Risk DESC")
query_Row_Number=sqldf("select Actual_Risk, Predicted_Risk, ROW_NUMBER() OVER (ORDER BY Predicted_Risk DESC) as Row_Number FROM query_DESC")
query_Rank_Number <- query_Row_Number %>%
group_by(Actual_Risk) %>%
mutate(Rank = row_number())
query_Rank_Number
attach(query_Rank_Number)
query_AUC = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
attach(query_AUC)
gini = (auc_score*2) - 1
gini
sqldf_gini = (auc_score*2) - 1
sqldf_gini
MLmetrics_gini <- Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
MLmetrics_gini
cat("MLmetrics_gini: ", MLmetrics_gini)
cat("sqldf_gini: ", query_AUC$sqldf_gini)
cat("sqldf_gini: ", sqldf_gini)
auc_score
sqldf_gini = (auc_score*2) - 1
sqldf_gini
data <- read.csv("gc.csv")
library(MLmetrics)
library(sqldf)
library(dplyr)
library(knitr)
str(data) # check types
data = data[,-1]  # remove "id" column
sum(is.na(data$Saving.accounts)) #saving acc column has 183 null values
sum(is.na(data$Checking.account)) #checking acc column has 394 null values
data$Saving.accounts <- as.character(data$Saving.accounts)
data$Saving.accounts[is.na(data$Saving.accounts)] <- "none" # when you see NA transform it to "none"
data$Checking.account <- as.character(data$Checking.account)
data$Checking.account[is.na(data$Checking.account)] <- "none" # when you see NA transform it to "none"
sum(is.na(data))
data$Risk[data$Risk == "good"]  <- 0
data$Risk[data$Risk == "bad"]  <- 1
data$Risk = as.numeric(data$Risk) # transform target risks' type chr to num
str(data)
set.seed(12345)
train <- sample(1:nrow(data), nrow(data) * 0.8 ,replace = FALSE)
data_train <- data[train,]
data_test <- data[-train,]
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
MLmetrics_gini <- Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
MLmetrics_gini
query_DESC=sqldf("select * from test_df order by Predicted_Risk DESC")
query_Row_Number=sqldf("select Actual_Risk, Predicted_Risk, ROW_NUMBER() OVER (ORDER BY Predicted_Risk DESC) as Row_Number FROM query_DESC")
query_Rank_Number <- query_Row_Number %>%
group_by(Actual_Risk) %>%
mutate(Rank = row_number())
query_Rank_Number
attach(query_Rank_Number)
query_AUC = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
attach(query_AUC)
auc_score
sqldf_gini = (auc_score*2) - 1
sqldf_gini
cat("MLmetrics_gini: ", MLmetrics_gini)
cat("sqldf_gini: ", sqldf_gini)
data <- read.csv("gc.csv")
library(MLmetrics)
library(sqldf)
library(dplyr)
library(knitr)
str(data) # check types
data = data[,-1]  # remove "id" column
sum(is.na(data$Saving.accounts)) #saving acc column has 183 null values
sum(is.na(data$Checking.account)) #checking acc column has 394 null values
data$Saving.accounts <- as.character(data$Saving.accounts)
data$Saving.accounts[is.na(data$Saving.accounts)] <- "none" # when you see NA transform it to "none"
data$Checking.account <- as.character(data$Checking.account)
data$Checking.account[is.na(data$Checking.account)] <- "none" # when you see NA transform it to "none"
sum(is.na(data))
data$Risk[data$Risk == "good"]  <- 0
data$Risk[data$Risk == "bad"]  <- 1
data$Risk = as.numeric(data$Risk) # transform target risks' type chr to num
str(data)
set.seed(12345)
train <- sample(1:nrow(data), nrow(data) * 0.8 ,replace = FALSE)
data_train <- data[train,]
data_test <- data[-train,]
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
MLmetrics_gini <- Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
MLmetrics_gini
query_DESC=sqldf("select * from test_df order by Predicted_Risk DESC")
query_Row_Number=sqldf("select Actual_Risk, Predicted_Risk, ROW_NUMBER() OVER (ORDER BY Predicted_Risk DESC) as Row_Number FROM query_DESC")
query_Rank_Number <- query_Row_Number %>%
group_by(Actual_Risk) %>%
mutate(Rank = row_number())
query_Rank_Number
attach(query_Rank_Number)
query_AUC = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
attach(query_AUC)
auc_score
sqldf_gini = (auc_score*2) - 1
sqldf_gini
cat("MLmetrics_gini: ", MLmetrics_gini)
cat("sqldf_gini: ", sqldf_gini)
auc_score
sqldf_gini = (auc_score*2) - 1
sqldf_gini
cat("MLmetrics_gini: ", MLmetrics_gini)
cat("sqldf_gini: ", sqldf_gini)
data <- read.csv("gc.csv")
library(MLmetrics)
library(sqldf)
library(dplyr)
library(knitr)
str(data) # check types
data = data[,-1]  # remove "id" column
sum(is.na(data$Saving.accounts)) #saving acc column has 183 null values
sum(is.na(data$Checking.account)) #checking acc column has 394 null values
data$Saving.accounts <- as.character(data$Saving.accounts)
data$Saving.accounts[is.na(data$Saving.accounts)] <- "none" # when you see NA transform it to "none"
data$Checking.account <- as.character(data$Checking.account)
data$Checking.account[is.na(data$Checking.account)] <- "none" # when you see NA transform it to "none"
sum(is.na(data))
data$Risk[data$Risk == "good"]  <- 0
data$Risk[data$Risk == "bad"]  <- 1
data$Risk = as.numeric(data$Risk) # transform target risks' type chr to num
str(data)
set.seed(12345)
train <- sample(1:nrow(data), nrow(data) * 0.8 ,replace = FALSE)
data_train <- data[train,]
data_test <- data[-train,]
glm.model <- glm(Risk ~ ., family = binomial, data = data_train)
glm.pred <- predict(glm.model, data_test, type="response")
test_df <- data.frame(glm.pred, data_test$Risk)
names(test_df)[1] <- "Predicted_Risk"
names(test_df)[2] <- "Actual_Risk"
test_df
MLmetrics_gini <- Gini(test_df$Predicted_Risk, test_df$Actual_Risk)
MLmetrics_gini
query_DESC=sqldf("select * from test_df order by Predicted_Risk DESC")
query_Row_Number=sqldf("select Actual_Risk, Predicted_Risk, ROW_NUMBER() OVER (ORDER BY Predicted_Risk DESC) as Row_Number FROM query_DESC")
query_Rank_Number <- query_Row_Number %>%
group_by(Actual_Risk) %>%
mutate(Rank = row_number())
query_Rank_Number
attach(query_Rank_Number)
query_AUC = sqldf("WITH POSITIVE_SCORES AS (
select Predicted_Risk as p_pos
from query_Rank_Number
where Actual_Risk = 1
),
NEGATIVE_SCORES AS (
select Predicted_Risk as p_neg
from query_Rank_Number
where Actual_Risk = 0
)
select avg(case
when p_pos > p_neg then 1
when p_pos = p_neg then 0.5
else 0
end) as auc_score
from
POSITIVE_SCORES
cross join
NEGATIVE_SCORES")
attach(query_AUC)
auc_score
sqldf_gini = (auc_score*2) - 1
sqldf_gini
cat("MLmetrics_gini: ", MLmetrics_gini)
cat("sqldf_gini: ", sqldf_gini)
